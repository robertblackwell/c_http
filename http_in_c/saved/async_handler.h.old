#ifndef C_HTTP_ASYNC_HANDLER_H
#define C_HTTP_ASYNC_HANDLER_H
#include <http_in_c/check_tag.h>
#include <http_in_c/runloop/rl_internal.h>
#include <http_in_c/common/list.h>
#include <http_in_c/common/iobuffer.h>
#include <http_in_c/async/async_connection.h>
#include <http_in_c/async/async_server.h>

#define AsyncHandler_TAG "ASYDLR"
#include <http_in_c/runloop/rl_checktag.h>

typedef struct AsyncHandler_s AsyncHandler, *AsyncHandlerRef;

/**
 * Instance of a AsyncHamdler calls this CB when it is closing down.
 * void* server_ref is an anonymous reference passed at handler creation by its parent object
 */
typedef void(*DH_Completion_CB)(void* server_ref, AsyncHandlerRef href);

typedef struct AsyncHandler_s {
    DECLARE_TAG;
    int                 raw_socket;
    ReactorRef          reactor_ref;
    AsyncConnectionRef  async_connection_ref;
    DH_Completion_CB    completion_callback;
    void*               server_ref;
    ListRef             input_list;
    ListRef             output_list; // List of AsyncMessageRef - responses
    MessageRef          active_response;

} AsyncHandler, *AsyncHandlerRef;

AsyncHandlerRef async_handler_new(
        int socket,
        ReactorRef reactor_ref,
        void(*completion_cb)(void*, AsyncHandlerRef),
        void* completion_cb_arg);
void async_handler_init(
        AsyncHandlerRef this, int socket,
        ReactorRef reactor_ref,
        void(*completion_cb)(void*, AsyncHandlerRef),
        void* completion_cb_arg);
void async_handler_free(AsyncHandlerRef this);
void async_handler_anonymous_dispose(void** p);

#endif