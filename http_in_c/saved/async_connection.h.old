#ifndef chttp_async_connection_h
#define chttp_async_connection_h
#include <http_in_c/runloop/runloop.h>
#include <http_in_c/common/list.h>
#include <http_in_c/common/iobuffer.h>
#include <http_in_c/async/async_handler.h>
#include <http_in_c/async/async_server.h>
#include <http_in_c/http/message.h>
#include <http_in_c/http/parser.h>

#define AsyncConnection_TAG "ASYCONN"
#include <rbl/check_tag.h>

enum AsyncConnectionErrCode {
    AsyncConnectionErrCode_is_closed = -31,
    AsyncConnectionErrCode_io_error = -32,
    AsyncConnectionErrCode_parse_error = -33
};

typedef struct AsyncConnection_s AsyncConnection, *AsyncConnectionRef;
/**
 * In the following void* href is aan anonymous reference
 * passed to the connection at init time by the parent/sibling object
 * that created the AsyncConnection object
 *
 */
typedef void(*DC_Read_CB)(void* href, MessageRef, int status);
typedef void(*DC_Write_CB)(void* href, int status);
/**
 * DC_Close_CB is called by the connection when it is closing down
 */
typedef void(*DC_Close_CB)(void* href);

typedef struct AsyncConnection_s {
    DECLARE_TAG;
    ReactorRef      reactor_ref;
    RtorStreamRef   socket_stream_ref;
    AsyncHandlerRef handler_ref;
    IOBufferRef     active_input_buffer_ref;
    IOBufferRef     active_output_buffer_ref;
    http_parser_t*  http_parser_ptr;
    int             read_state;
    int             write_state;
    DC_Read_CB      on_read_cb;
    DC_Write_CB     on_write_cb;
    DC_Close_CB     on_close_cb;
    bool            cleanup_done_flag;
    bool            readside_posted;
    bool            writeside_posted;
    bool            post_active;

} AsyncConnection, *AsyncConnectionRef;

AsyncConnectionRef async_connection_new(
        int                 socket,
        ReactorRef          reactor_ref,
        AsyncHandlerRef     handler_ref,
        void(*connection_completion_cb)(void* href));

void async_connection_init(
        AsyncConnectionRef this,
        int                 socket,
        ReactorRef          reactor_ref,
        AsyncHandlerRef      handler_ref,
        void(*connection_completion_cb)(void* href));

void async_connection_free(AsyncConnectionRef this);

void async_connection_amonymous_dispose(void* p);

void async_connection_read(AsyncConnectionRef connection_ref, void(*on_demo_read_cb)(void* href, MessageRef, int statuc));
void async_connection_write(AsyncConnectionRef connection_ref, MessageRef, void(*on_demo_write_cb)(void* href, int statuc));

#endif