#ifndef c_async_server_h
#define c_async_server_h

#include <http_in_c/socket_functions.h>
#include <http_in_c/constants.h>
#include <http_in_c/runloop/runloop.h>
#include <http_in_c/http/message.h>
#include <http_in_c/async/async_handler.h>

#define AsyncServer_TAG "DmSRVR"
#include <http_in_c/check_tag.h>

#define XR_NBR_WORKERS 1
typedef struct AsyncHandler_s AsyncHandler, *AsyncHandlerRef;
typedef struct  AsyncServer_s AsyncServer, *AsyncServerRef;
struct AsyncServer_s {
    DECLARE_TAG;
    int                     port;
    socket_handle_t         listening_socket_fd;
    ReactorRef              reactor_ref;
    RtorListenerRef         listening_watcher_ref;
//    TcpConnListRef          conn_list_ref;
    ListRef                 handler_list;
    void(*completion_callback)(AsyncServerRef, AsyncHandlerRef);
};

/**
 * Create a new server object.
 * \param port     The localhost:port on which the server will listen
 * \param handler  A function conforming to XrHandlerFunction (see aio_api/handler.h) which will be called to handle all requests that are parsed successfully.
 * \return
 */
AsyncServerRef AsyncServer_new(int port);
void AsyncServer_free(AsyncServerRef this);
void DemoServer_dispose(AsyncServerRef* srefptr);
void DemoServer_listen(AsyncServerRef server);
void DemoServer_terminate(AsyncServerRef this);
#endif