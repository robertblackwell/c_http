/*
 * THis is a temmplate file from which a correctly typed doubdly link list
 * implementation can be generated by symbol substitution.
 *
 * There are 3 symbols that must be replaced
 *  __TYPE__ : replace this symbol with the name of the type to be held by the list
 *     (cannot be struct AName - use type def to turn into a single identifier)
 *     This will result in a TypeName for the generated list.
 *     If __TYPE__ is replaced with Sock the list type will be SockList and SockList* will be typdef'd to SockListRef
 *
 *  __PREFIX__: This template generated a set of functions and a set of macros that "overload" the function names exported by List.h
 *      If __PREFIX__ is replaced by SOK then
 *          functions of the form
 *              SockListRef SOKList_new() and
 *              SOKList_free(SockListRef sref) .. and one for each List function will ge generated
 *
 *          and macros of the form
 *              SockListRef M_SOKList_new() and
 *              M_SOKList_free(SockListRef sref) .. and one for each List function will ge generated
 */

// include the base implementation of a doublde list
//#include <List.h>

#define M___PREFIX__List_new() List_new(dealloc)
#define M___PREFIX__List_free(lref) List_free(lref)
#define M___PREFIX__List_first(lref) (__TYPE__ListRef)List_first(lref)
#define M___PREFIX__List_last(lref) (__TYPE__ListRef)List_last(lref)
#define M___PREFIX__List_remove_first(lref) (__TYPE__ListRef)List_remove_first(lref)
#define M___PREFIX__List_remove_last(lref) (__TYPE__ListRef)List_remove_last(lref)
#define M___PREFIX__List_itr_unpack(lref, iter) (__TYPE__ListRef)List_itr_unpack(lref, iter)
#define M___PREFIX__List_iterator(lref) List_iterator(lref)
#define M___PREFIX__List_itr_next(lref, iter) List_itr_next(lref, iter)

typedef ListRef __TYPE__ListRef;
typedef ListNodeRef __TYPE__ListIter, ListIter;

DObjListRef  __PREFIX__List_new();
void         __PREFIX__List_free(DObjListRef lref) ;
__TYPE__Ref  __PREFIX__List_first(__TYPE__ListRef lref);
__TYPE__Ref  __PREFIX__List_last(__TYPE__ListRef lref) ;
__TYPE__Ref  __PREFIX__List_remove_first(__TYPE__ListRef lref);
__TYPE__Ref  __PREFIX__List_remove_last(__TYPE__ListRef lref);
__TYPE__Ref  __PREFIX__List_itr_unpack(__TYPE__ListRef lref, DObjListIter iter);
__TYPE__ListIter __PREFIX__List_iterator(__TYPE__ListRef lref);
__TYPE__ListIter __PREFIX__List_itr_next(__TYPE__ListRef lref, DObjListIter iter);
