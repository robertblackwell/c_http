<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group__runloopevents" kind="group">
    <compoundname>runloopevents</compoundname>
    <title>Runloop Events</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><heading level="2">Runloop Events</heading>
</para>
<para>There are 5 types of events that can be waited for using a Runloop. They are:<itemizedlist>
<listitem><para>timer, wait for it to expire</para>
</listitem><listitem><para>socket/pipe, ready for read, ready for write, experienced an error</para>
</listitem><listitem><para>socket, when acting as a server is ready for an accept() call. That is has a client waiting.</para>
</listitem><listitem><para>a linux eventfd, wait for the fd to be triggered</para>
</listitem><listitem><para>interthread queue, waiting for a new entry to be added</para>
</listitem></itemizedlist>
</para>
<para>Each type of event is associated with a specific type of opaque object, they are:</para>
<para><itemizedlist>
<listitem><para>RunloopTimer, RunloopStream, RunloopListener, RunloopEventFd, InterthreadQueue</para>
</listitem></itemizedlist>
</para>
<para>In order to wait for one of these events for a specific file descriptor, code using a runloop must acquire an instance of one of these types, configure it correctly and present it to the runloop togeth with a callback function. The runloop will call the calback function when the event is triggered.</para>
<para>There is some common data and behaviour shared between these 5 opaque types. That common data and behaviour is represented by the type RunloopWatcher. Each of the 5 opaque watcher types includes an instance of RunloopWatcher. In other languages we would say that RunloopWatcher is the base type and the other 5 inherit that base type. </para>
    </detaileddescription>
  </compounddef>
</doxygen>
