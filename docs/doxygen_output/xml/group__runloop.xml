<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group__runloop" kind="group">
    <compoundname>runloop</compoundname>
    <title>Runloop</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__runloop_1ga1a88ae0c5a63134f5553a08f686cfaaa" prot="public" static="no">
        <type>struct Runloop_s</type>
        <definition>typedef struct Runloop_s Runloop</definition>
        <argsstring></argsstring>
        <name>Runloop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/robert/Projects/http_in_c/http_in_c/runloop/runloop.h" line="1" column="0" bodyfile="/home/robert/Projects/http_in_c/http_in_c/runloop/runloop.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__runloop_1ga3be36d97cf9a7f7b4180b71d95cde72e" prot="public" static="no">
        <type>struct Runloop_s *</type>
        <definition>typedef struct Runloop_s * RunloopRef</definition>
        <argsstring></argsstring>
        <name>RunloopRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/robert/Projects/http_in_c/http_in_c/runloop/runloop.h" line="46" column="25" bodyfile="/home/robert/Projects/http_in_c/http_in_c/runloop/runloop.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__runloop_1ga86a1dcc3f557758fb51905ca405fab17" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* PostableCallback) (RunloopRef runloop, void *context_arg)</definition>
        <argsstring>)(RunloopRef runloop, void *context_arg)</argsstring>
        <name>PostableCallback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The function <ref refid="group__runloop_1gac11185fea514d7b9880becab88dff9f0" kindref="member">runloop_post()</ref> adds callbacks to a Runloop. The following typedef gives the signature of the kind of functions that can be posted as callbacks to a runloop. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/robert/Projects/http_in_c/http_in_c/runloop/runloop.h" line="106" column="10" bodyfile="/home/robert/Projects/http_in_c/http_in_c/runloop/runloop.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__runloop_1ga79ee07aed2b3ec022d34b48113a9dfd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__runloop_1ga3be36d97cf9a7f7b4180b71d95cde72e" kindref="member">RunloopRef</ref></type>
        <definition>RunloopRef runloop_new</definition>
        <argsstring>(void)</argsstring>
        <name>runloop_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A Runloop instance can be create in new dynamic memory with <ref refid="group__runloop_1ga79ee07aed2b3ec022d34b48113a9dfd4" kindref="member">runloop_new()</ref>, or in already allocated memory with <ref refid="group__runloop_1ga3d04fc2f2da95cf4a84ddd79cb3d0cd0" kindref="member">runloop_init()</ref>.</para>
<para>In the case of <ref refid="group__runloop_1ga3d04fc2f2da95cf4a84ddd79cb3d0cd0" kindref="member">runloop_init()</ref> it is the callers responsibility to ensure the memory pointed to by <bold>athis</bold> is large enough. That greater than <computeroutput>sizeof(Runloop)</computeroutput>.</para>
<para>The following is the recommended way to use <ref refid="group__runloop_1ga3d04fc2f2da95cf4a84ddd79cb3d0cd0" kindref="member">runloop_init()</ref>: <programlisting><codeline><highlight class="normal">Runloop<sp/>myrunloop;</highlight></codeline>
<codeline><highlight class="normal">runloop_init(&amp;myrunloop);</highlight></codeline>
</programlisting></para>
<para>The function <ref refid="group__runloop_1gab45049e45e9d38907d4f54b740bde012" kindref="member">runloop_free()</ref> should only be called on a runloop instance created with <ref refid="group__runloop_1ga79ee07aed2b3ec022d34b48113a9dfd4" kindref="member">runloop_new()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/robert/Projects/http_in_c/http_in_c/runloop/runloop.h" line="64" column="12" declfile="/home/robert/Projects/http_in_c/http_in_c/runloop/runloop.h" declline="64" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__runloop_1ga3d04fc2f2da95cf4a84ddd79cb3d0cd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runloop_init</definition>
        <argsstring>(RunloopRef athis)</argsstring>
        <name>runloop_init</name>
        <param>
          <type><ref refid="group__runloop_1ga3be36d97cf9a7f7b4180b71d95cde72e" kindref="member">RunloopRef</ref></type>
          <declname>athis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/robert/Projects/http_in_c/http_in_c/runloop/runloop.h" line="65" column="6" declfile="/home/robert/Projects/http_in_c/http_in_c/runloop/runloop.h" declline="65" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__runloop_1gaf071ad880894c5eea7992af4c2bea4c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runloop_deinit</definition>
        <argsstring>(RunloopRef athis)</argsstring>
        <name>runloop_deinit</name>
        <param>
          <type><ref refid="group__runloop_1ga3be36d97cf9a7f7b4180b71d95cde72e" kindref="member">RunloopRef</ref></type>
          <declname>athis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A Runloop holds pointers to other dynamic objects and is responsible for the lifetime of some of those objects. Thus to avoid memory leaks a Runloop must be de-initialized correctly.</para>
<para>The function <ref refid="group__runloop_1gaf071ad880894c5eea7992af4c2bea4c2" kindref="member">runloop_deinit()</ref> will correctly free all the objects pointed at by a runloop instance but will not free the memory directly occupied by the runloop object.</para>
<para><ref refid="group__runloop_1gab45049e45e9d38907d4f54b740bde012" kindref="member">runloop_free()</ref> will call <ref refid="group__runloop_1gaf071ad880894c5eea7992af4c2bea4c2" kindref="member">runloop_deinit()</ref> and also free the memory occupied by the Runloop instance. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/robert/Projects/http_in_c/http_in_c/runloop/runloop.h" line="78" column="6" declfile="/home/robert/Projects/http_in_c/http_in_c/runloop/runloop.h" declline="78" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__runloop_1gab45049e45e9d38907d4f54b740bde012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runloop_free</definition>
        <argsstring>(RunloopRef athis)</argsstring>
        <name>runloop_free</name>
        <param>
          <type><ref refid="group__runloop_1ga3be36d97cf9a7f7b4180b71d95cde72e" kindref="member">RunloopRef</ref></type>
          <declname>athis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/robert/Projects/http_in_c/http_in_c/runloop/runloop.h" line="79" column="6" declfile="/home/robert/Projects/http_in_c/http_in_c/runloop/runloop.h" declline="79" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__runloop_1ga0fd1ed9a309a3136c2a6e6540ea37abe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int runloop_run</definition>
        <argsstring>(RunloopRef athis, time_t timeout)</argsstring>
        <name>runloop_run</name>
        <param>
          <type><ref refid="group__runloop_1ga3be36d97cf9a7f7b4180b71d95cde72e" kindref="member">RunloopRef</ref></type>
          <declname>athis</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Start a Runloop. A Runloop is always doing one of the following things:</para>
<para><itemizedlist>
<listitem><para>is inside a call to epoll_wait() waiting for events to fire</para>
</listitem><listitem><para>processing the file descriptors and events returned by epoll_wait()</para>
</listitem><listitem><para>running down its list of waiting callback functions and calling them one at a time.</para>
</listitem></itemizedlist>
</para>
<para>The function <ref refid="group__runloop_1ga0fd1ed9a309a3136c2a6e6540ea37abe" kindref="member">runloop_run()</ref> only returns when there are no file descriptors to epoll_wait() on and no callbacks waiting to be called.</para>
<para>Hence before calling <ref refid="group__runloop_1ga0fd1ed9a309a3136c2a6e6540ea37abe" kindref="member">runloop_run()</ref> you must have some file descriptors being waited on for events and/or some callbacks that have been added to the Runloop to be called. Otherwise the <ref refid="group__runloop_1ga0fd1ed9a309a3136c2a6e6540ea37abe" kindref="member">runloop_run()</ref> call will return immediately.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>athis</parametername>
</parameternamelist>
<parameterdescription>
<para>Runloopref </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>time_t a timeout interval the runloop will terminate when this timeout expires if -1 the runloop will run forever. In this project values other than -1 are only used in testing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/robert/Projects/http_in_c/http_in_c/runloop/runloop.h" line="101" column="5" declfile="/home/robert/Projects/http_in_c/http_in_c/runloop/runloop.h" declline="101" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__runloop_1gac11185fea514d7b9880becab88dff9f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runloop_post</definition>
        <argsstring>(RunloopRef runloop, PostableCallback callback_function, void *context_arg)</argsstring>
        <name>runloop_post</name>
        <param>
          <type><ref refid="group__runloop_1ga3be36d97cf9a7f7b4180b71d95cde72e" kindref="member">RunloopRef</ref></type>
          <declname>runloop</declname>
        </param>
        <param>
          <type><ref refid="group__runloop_1ga86a1dcc3f557758fb51905ca405fab17" kindref="member">PostableCallback</ref></type>
          <declname>callback_function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context_arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a function to a Runloop callback list. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>runloop</parametername>
</parameternamelist>
<parameterdescription>
<para>A RunloopRef </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback_function</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the callback function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>context_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>This is a pointer used by the callback to gain access to its context. it can be a pointer to anything. It not used by the Runloop. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/robert/Projects/http_in_c/http_in_c/runloop/runloop.h" line="114" column="7" declfile="/home/robert/Projects/http_in_c/http_in_c/runloop/runloop.h" declline="114" declcolumn="7"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A runloop is a mechanism that provides two functions:</para>
<para><heading level="2">File descriptor events</heading>
</para>
<para>Allows code to be notified when a file descriptor is ready for input(POLLIN) or output(POLLOUT) or experiences an error.</para>
<para>This mechanism allows a single OS thread to handle input/output for multiple file descriptors simultaniously.</para>
<para>Notification is through a callback mechanism.</para>
<para>This is an example of the well known observer pattern.</para>
<para><heading level="2">Lightweight multi-threading</heading>
</para>
<para>A runloop provides a mechanism where by blocks of code (in our case functions) can be added to a queue of waiting blocks and be executed in its turn. This mechanism provides a lightweight form of multi-threading inside a single OS thread.</para>
<para><heading level="2">Notes and warnings</heading>
</para>
<para>An important point to understand is that a runloop is a forever loop, once you call <ref refid="group__runloop_1ga0fd1ed9a309a3136c2a6e6540ea37abe" kindref="member">runloop_run()</ref> it never returns. Before calling <ref refid="group__runloop_1ga0fd1ed9a309a3136c2a6e6540ea37abe" kindref="member">runloop_run()</ref> there must be some event handlers set up or callbacks scheduled on the runloop using <ref refid="group__runloop_1gac11185fea514d7b9880becab88dff9f0" kindref="member">runloop_post()</ref> in order that stuff happens.</para>
<para>These two features are found in well known libraries such as <bold>libuv</bold>, <bold>libevent</bold>, and <bold>boost::asio</bold>.</para>
<para>A runloop is implemented as an opaque type <bold>Runloop</bold>, is almost always referenced via a <bold>RunloopRef</bold>.</para>
<para>A single instance of a Runloop can only be used by a single OS threads. There is an exception to this restriction which will be discussed below. </para>
    </detaileddescription>
  </compounddef>
</doxygen>
